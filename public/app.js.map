{
  "version": 3,
  "sources": ["../src/app.ts"],
  "sourcesContent": ["const excelForm = document.forms.namedItem(\n  \"excelForm\"\n) as HTMLFormElement | null;\nconst fileInput = document.getElementById(\n  \"excelFile\"\n) as HTMLInputElement | null;\n\nif (excelForm && fileInput) {\n  excelForm.addEventListener(\"submit\", async (event) => {\n    event.preventDefault();\n\n    const formData = new FormData();\n    const selectedFile = fileInput.files?.[0];\n\n    if (selectedFile) {\n      formData.append(\"excelFile\", selectedFile);\n\n      try {\n        const res = await fetch(\"/.netlify/functions/convert\", {\n          method: \"POST\",\n          body: formData,\n        });\n\n        if (res.ok) {\n          // const blob = await res.blob();\n          // const url = URL.createObjectURL(blob);\n          // window.location.href = url;\n          // console.log(await res.text());\n\n          // Convert the response body to ArrayBuffer\n          // const arrayBuffer = await res.arrayBuffer();\n\n          // // Convert the ArrayBuffer to a buffer (Uint8Array)\n          // const buffer = new Uint8Array(arrayBuffer);\n\n          // Get the blob data from the response\n          const blob = await res.blob();\n\n          // Get the filename from the Content-Disposition header\n          const contentDisposition = res.headers.get(\"Content-Disposition\");\n          const filenameMatch =\n            contentDisposition && contentDisposition.match(/filename=\"(.+?)\"/);\n          const filename = filenameMatch\n            ? filenameMatch[1]\n            : `em-${new Date().getTime()}.xlsx`;\n\n          // Create a download link\n          const downloadLink = document.createElement(\"a\");\n          downloadLink.href = URL.createObjectURL(blob);\n          downloadLink.download = filename;\n\n          // Append the link to the body and trigger the click event\n          document.body.appendChild(downloadLink);\n          downloadLink.click();\n\n          // // Clean up: remove the link from the body\n          document.body.removeChild(downloadLink);\n        } else {\n          console.error(\n            \"Failed to convert. Server returned:\",\n            res.status,\n            res.statusText\n          );\n          // Handle error as needed\n        }\n      } catch (error) {\n        console.error(\"An error occurred during conversion:\", error);\n        // Handle error as needed\n      }\n    } else {\n      console.error(\"No file selected for conversion.\");\n      // Handle case where no file is selected\n    }\n  });\n} else {\n  console.error(\"Form or file input not found.\");\n  // Handle case where button or file input is not found\n}\n"],
  "mappings": "mBAAA,IAAMA,EAAY,SAAS,MAAM,UAC/B,WACF,EACMC,EAAY,SAAS,eACzB,WACF,EAEID,GAAaC,EACfD,EAAU,iBAAiB,SAAU,MAAOE,GAAU,CACpDA,EAAM,eAAe,EAErB,IAAMC,EAAW,IAAI,SACfC,EAAeH,EAAU,QAAQ,CAAC,EAExC,GAAIG,EAAc,CAChBD,EAAS,OAAO,YAAaC,CAAY,EAEzC,GAAI,CACF,IAAMC,EAAM,MAAM,MAAM,8BAA+B,CACrD,OAAQ,OACR,KAAMF,CACR,CAAC,EAED,GAAIE,EAAI,GAAI,CAaV,IAAMC,EAAO,MAAMD,EAAI,KAAK,EAGtBE,EAAqBF,EAAI,QAAQ,IAAI,qBAAqB,EAC1DG,EACJD,GAAsBA,EAAmB,MAAM,kBAAkB,EAC7DE,EAAWD,EACbA,EAAc,CAAC,EACf,MAAM,IAAI,KAAK,EAAE,QAAQ,CAAC,QAGxBE,EAAe,SAAS,cAAc,GAAG,EAC/CA,EAAa,KAAO,IAAI,gBAAgBJ,CAAI,EAC5CI,EAAa,SAAWD,EAGxB,SAAS,KAAK,YAAYC,CAAY,EACtCA,EAAa,MAAM,EAGnB,SAAS,KAAK,YAAYA,CAAY,CACxC,MACE,QAAQ,MACN,sCACAL,EAAI,OACJA,EAAI,UACN,CAGJ,OAASM,EAAO,CACd,QAAQ,MAAM,uCAAwCA,CAAK,CAE7D,CACF,MACE,QAAQ,MAAM,kCAAkC,CAGpD,CAAC,EAED,QAAQ,MAAM,+BAA+B",
  "names": ["excelForm", "fileInput", "event", "formData", "selectedFile", "res", "blob", "contentDisposition", "filenameMatch", "filename", "downloadLink", "error"]
}
